title 'Foo Config'

control 'services' do # FIXME: dokken
  describe service('haveged') do
    it { should be_installed }
    it { should be_running }
  end
end

control 'root key' do
  describe file('/root/.gnupg/gpg_batch_config_bar') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/bar/) }
  end

  describe bash('sudo -u root -i gpg2 --homedir /root/.gnupg --list-keys') do # FIXME: no sudo w/ dokken
    its('exit_status') { should eq 0 }
    its('stdout') { should match /Chef Generated Default \(bar\) \(generated by Chef\)/ }
  end
end

control 'foo Key' do
  describe file('/home/foo/.gnupg/gpg_batch_config_foo') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/Key-Type: 1/) }
    its(:content) { should match(/Key-Length: 2048/) }
    its(:content) { should match(Regexp.escape('Chef Generated Default (foo)')) }
  end

  describe bash('sudo -u foo -i gpg2 --homedir /home/foo/.gnupg --list-keys') do
    its('exit_status') { should eq 0 }
    its(:stdout) { should match(Regexp.escape('Chef Generated Default (foo)')) }
  end
end

control 'Export key to file' do
  describe file('/tmp/foo.key') do
    it { should exist }
    its('owner') { should eq 'foo' }
    its('group') { should eq 'foo' }
    its(:content) { should match(/BEGIN PGP PUBLIC KEY BLOCK/) }
  end
end

control 'Import key from file' do
  desc 'The root users keychain should contain the imported keys'

  describe bash('sudo -u root -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match(Regexp.escape('409B6B1796C275462A1703113804BB82D39DC0E3')) }
  end
end

control 'Delete public key' do
  desc 'The root users key list should not contain the key we delete'

  describe bash('sudo -u root -i gpg2 --list-keys 7877AF01696A73C4D02176F2964720FF470F4EDB') do
    its('exit_status') { should eq 2 }
    # its('stdout') { should match(Regexp.escape('Chef Generated Default (foo) (generated by Chef)')) }
  end
end

control 'Delete secret key' do
  desc 'The key we asked to delete should not exist'

  describe bash('sudo -u root -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should_not match /7877AF01696A73C4D02176F2964720FF470F4EDB/ }
    its('stdout') { should_not match /Chef Generated Default \(dummy\) \(generated by Chef\)/ }
  end
end

control 'Import key from file non-root user' do
  desc 'The non-root users keychain should exist with correct permission and contain the imported keys'

  describe directory('/home/barfoo/.gnupg/') do
    it { should exist }
    its('owner') { should eq 'barfoo' }
    its('group') { should eq 'barfoo' }
  end

  # describe bash('sudo -u barfoo -i gpg2 --list-keys') do
  #   its('exit_status') { should eq 0 }
  #   its('stdout') { should match /custom comment by foobar/  }
  # end
end

control 'Delete secret key non-root user' do
  desc 'The key we asked to delete should not exist'

  describe bash('sudo -u barfoo -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should_not match /7877AF01696A73C4D02176F2964720FF470F4EDB/ }
    its('stdout') { should_not match /Chef Generated Default \(dummy\) \(generated by Chef\)/ }
  end
end
